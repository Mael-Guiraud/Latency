Pour Maël: relire l'article et proposer des figures/exemples pour améliorer la compréhension (sans doute à mettre que dans la thèse), des corrections générales/remarques utiles.

Un algo de plus à tester expérimentalement:
la version entrée aléatoire de compact tuples: on met dans l'ordre des restes les paquets.
On colle si on peut le paquet courant à un autre paquet dans la deuxième période
en utilisant des meta offsets (pour agrandir un compact tuple). Ça combine de manière très simple
meta-offset et l'idée de first fit, qui est de construire des assignements compacts. 
On peut prouver que cet algo marche avec grande proba (dépendant de la taille) sur des entrées aléatoires de charge 0.5 - \epsilon.
Il suffit d'analyser par palier les ajouts de paquet, ça ne donne jamais mieux que 0.5. et donc pas mieux que la suite. 
(comparer à first fit avec tau = 1 (pour un grand nombre de routes).

Figure 1: espace à mettre entre les deux. Metrre le terme RRH à côté des antennes et BBU dans le data center

Figure 2: à la place de i et d_i écrire Message(i) et Delay(d_i)

Figure 3: Mettre les périodes côte à côte pour gagner de la place. Préciser Gap = 3 et r_1 - r_0 >0

Trouver un style pour le nom de tous les algos du papier ?

Figure 4: forbidden meta offsets plutot que meta-offsets forbidden

Aligner à gauche les équations dans le th 6

Dans la figure 5, représenter le paquet de taille 2 (avec des hachures) et représenter A(j) qui fait le deuxième cas de la preuve.
 
 Pour la thèse\version longue, des exemples de solution avec le potentiel des routes/messages
 seraient utiles
 
Mettre les figures 6 et 7 cote à cote et enlever le blanc à gauche (faire commencer à 0.4 ou 0.5)
Peut être essayer la résolution exacte quand il y a plus de route, mais mettre un time out. 
Ça devrait passer pour des charges jusquà 75%.

Mettre les figures 9 et 10 côte à côte en une seule figure. Faire commencer à 0.6 pour la deuxième courbe.
Faire l'exp avec P=1000 pour montrer que tout s'écrase ?

Faire des expériences avec des routes courtes, pour vérifier s'il y a quelque chose d'intéressant à faire.

Intégrer des tableaux qui comparent le temps pris par les algos (routes courtes et longues).
