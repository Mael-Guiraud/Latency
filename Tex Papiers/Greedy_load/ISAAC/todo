Un algo de plus à tester expérimentalement:
la version entrée aléatoire de compact tuples: on met dans l'ordre des restes les paquets.
On colle si on peut le paquet courant à un autre paquet dans la deuxième période
en utilisant des meta offsets, pour agrandir un compact tuple à chaque fois si possible.
On peut prouver que cet algo marche avec grande proba (dépendant de la taille) sur des entrées aléatoires de charge 0.5 - \epsilon.
Il suffit d'analyser par palier les ajouts de paquet, ça ne donne pas mieux que la suite et jamais mieux que 0.5.


Figure 1: espace à mettre entre les deux
Figure 2: à la place de i et d_i écrire Message(i) et Delay(d_i)

Trouver un style pour le nom de tous les algos du papier ?


Dans la figure 5, représenter le paquet de taille 2 (avec des hachures) et représenter A(j) qui fait le deuxième cas de la preuve.
 
Mettre les figures 6 et 7 cote à cote et enlever le blanc à gauche (faire commencer à 0.4 ou 0.5)
Peut être essayer la résolution exacte quand il y a plus de route, mais mettre un time out. 
Ça devrait passer pour des charges jusquà 75%.


Mettre les figures 9 et 10 côte à côte en une seule figure. Faire commencer à 0.6 pour la deuxième courbe.
Faire l'exp avec P=1000 pour montrer que tout s'écrase ?

Faire des expériences avec des routes courtes
